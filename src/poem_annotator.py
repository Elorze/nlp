import re
from pyhanlp import *

# 扩充的注释词典
ANNOTATION_DICT = {
    # 自然意象
    '雪': '象征纯洁、孤寂，也用于描写冬日景象。',
    '梅花': '象征坚韧、孤高的精神，尤其在寒冷中开放。',
    '秋气': '象征肃杀、转衰、落叶等季节氛围。',
    '明月': '象征思乡、清冷、高洁。',
    '寒江': '象征孤寂、清冷、萧瑟。',
    '黄鹂': '象征春意、生机、愉悦。',
    '翠柳': '象征春天、青春、希望。',
    '青天': '象征辽阔、舒展、高远。',
    '白鹭': '象征悠然、自由、高洁。',
    '孤舟': '象征孤独、漂泊、羁旅。',
    '长亭': '象征离别、送别、思念。',
    '寒雨': '象征凄清、哀愁、萧瑟。',
    '霜': '象征寒冷、肃杀、孤寂。',
    '落花': '象征凋零、离别、伤感。',
    '松风': '象征清高、孤傲、坚韧。',
    '竹林': '象征清雅、高洁、隐逸。',
    '溪水': '象征清澈、流动、生机。',
    '白云': '象征高远、飘逸、超脱。',
    '清泉': '象征纯净、清澈、生机。',
    '远山': '象征高远、深邃、神秘。',
    
    # 地名
    '江南': '中国著名地理意象，常与柔美、温婉相关。',
    '吴': '古代吴国地区，今江苏一带。',
    '洛阳': '古都，象征繁华、文化。',
    '长安': '古都，象征盛世、繁华。',
    '渭城': '古地名，今陕西咸阳，常用于送别场景。',
    '东吴': '三国时期吴国，今江浙一带。',
    '关山': '边塞要地，象征征途、离别。',
    
    # 人物
    '杜甫': '唐代著名诗人，诗圣。',
    '王维': '唐代著名诗人，诗佛。',
    '王之涣': '唐代著名诗人。',
    '蓑笠翁': '渔父形象，象征隐逸。',
    '周郎': '周瑜，三国时期吴国名将。',
    '王谢': '东晋时期王导、谢安，象征世家大族。',
    '二乔': '三国时期大乔、小乔，象征美女。',
    
    # 典故
    '后庭花': '出自《玉树后庭花》，象征亡国之音。',
    '铜雀春深锁二乔': '出自杜牧《赤壁》，暗指曹操。',
    '卷土重来': '出自《史记》，形容重新振作。',
    '孤帆远影': '出自李白《送孟浩然之广陵》，象征离别。',
    '千秋雪': '出自杜甫《绝句》，象征永恒。',
    '金戈铁马': '出自辛弃疾《永遇乐》，象征战争。',
    
    # 物象
    '剑': '象征豪情、壮志、侠义。',
    '楼': '象征登高望远、抒发情怀。',
    '马': '象征豪迈、奔放、壮志。',
    '雁': '象征离别、思乡、传信。',
    '灯': '象征光明、希望、温暖。',
    '窗': '象征内外、远近、思念。',
    '雨': '象征滋润、生机，也暗示愁绪。',
    '日': '象征光明、希望、永恒。',
    '风': '象征变化、流动、自由。',
    '水': '象征流动、变化、智慧。',
    '露': '象征短暂、易逝、清冷。',
    '月': '象征思乡、清冷、高洁。',
    '云': '象征变化、飘逸、高远。',
    '星': '象征希望、指引、永恒。',
    '雾': '象征朦胧、神秘、迷茫。',
    '霞': '象征美好、绚丽、短暂。',
    '虹': '象征美好、希望、转机。',
    '山': '象征稳重、高远、永恒。',
    '石': '象征坚定、永恒、不变。',
    '树': '象征生命、成长、希望。',
    '草': '象征生命力、顽强、卑微。',
    '竹': '象征高洁、坚韧、虚心。',
    '松': '象征坚韧、长寿、高洁。',
    '梅': '象征坚韧、孤傲、高洁。',
    '兰': '象征高洁、幽雅、君子。',
    '菊': '象征高洁、隐逸、坚贞。',
    '荷': '象征高洁、纯净、出淤泥而不染。',
    '琴': '象征高雅、文化、修养。',
    '棋': '象征智慧、谋略、修养。',
    '书': '象征知识、文化、修养。',
    '画': '象征艺术、美感、修养。',
    '笔': '象征创作、表达、才华。',
    '墨': '象征文化、艺术、修养。',
    '纸': '象征记录、传承、文化。',
    '砚': '象征文化、艺术、修养。',
    '茶': '象征清雅、淡泊、修养。',
    '酒': '象征豪情、洒脱、欢聚。',
    '香': '象征美好、高雅、修养。',
}

# 扩充的分类词典
IMAGERY_WORDS = set([
    '明月', '寒江', '黄鹂', '翠柳', '青天', '白鹭', '孤舟', '长亭', '寒雨',
    '霜', '落花', '秋气', '松风', '竹林', '溪水', '白云', '清泉', '远山',
    '梅花', '春风', '秋雨', '冬雪', '夏荷', '春草', '秋叶', '冬梅', '夏蝉',
    '春燕', '秋雁', '冬松', '夏竹', '春柳', '秋菊', '冬竹', '夏莲', '春桃',
    '秋桂', '冬梅', '夏荷', '春兰', '秋菊', '冬松', '夏竹', '春柳', '秋叶',
    '冬雪', '夏蝉', '春燕', '秋雁', '冬梅', '夏莲', '春桃', '秋桂', '冬竹'
])

PLACE_WORDS = set([
    '江南', '吴', '洛阳', '长安', '渭城', '东吴', '关山', '金陵', '姑苏',
    '扬州', '杭州', '西湖', '洞庭', '泰山', '华山', '黄山', '庐山', '峨眉',
    '长江', '黄河', '淮河', '汉江', '珠江', '钱塘', '西湖', '洞庭', '太湖',
    '鄱阳', '洪泽', '巢湖', '滇池', '洱海', '青海', '天山', '昆仑', '祁连'
])

PERSON_WORDS = set([
    '杜甫', '王维', '王之涣', '蓑笠翁', '周郎', '王谢', '二乔', '李白',
    '白居易', '李商隐', '杜牧', '王昌龄', '孟浩然', '刘禹锡', '柳宗元',
    '韩愈', '欧阳修', '苏轼', '辛弃疾', '李清照', '陆游', '文天祥', '岳飞',
    '范仲淹', '王安石', '司马光', '朱熹', '王阳明', '顾炎武', '黄宗羲'
])

ALLUSION_WORDS = set([
    '后庭花', '铜雀春深锁二乔', '卷土重来', '孤帆远影', '千秋雪', '金戈铁马',
    '乌衣巷', '朱雀桥', '王谢堂前燕', '旧时王谢', '寻常百姓', '商女不知亡国恨',
    '隔江犹唱', '秦淮', '烟笼寒水', '月笼沙', '夜泊秦淮', '近酒家', '商女',
    '亡国恨', '隔江', '犹唱', '后庭花', '铜雀', '春深', '锁二乔', '卷土重来'
])

OBJECT_WORDS = set([
    '鸟', '船', '柳', '剑', '楼', '马', '花', '雪', '雁', '灯', '窗',
    '月', '日', '星', '云', '雨', '风', '霜', '露', '雾', '霞', '虹',
    '山', '水', '石', '树', '草', '竹', '松', '梅', '兰', '菊', '荷',
    '琴', '棋', '书', '画', '笔', '墨', '纸', '砚', '茶', '酒', '香'
])

# 实体类型颜色映射
ENTITY_TYPE_COLOR = {
    '意象': '#FF6B6B',  # 红色
    '地名': '#4ECDC4',  # 青色
    '人物': '#45B7D1',  # 蓝色
    '典故': '#96CEB4',  # 绿色
    '物象': '#FFD93D',  # 黄色
}

class PoemAnnotator:
    def __init__(self):
        pass

    def annotate(self, poem):
        """
        返回：
        [
            {'text': '千山', 'type': '意象', 'annotation': '“千山”象征空旷与孤寂，常用于描绘冬景。'},
            ...
        ]
        """
        entities = []
        words = HanLP.segment(poem)
        for word in words:
            w = str(word.word)
            # 分类
            if w in IMAGERY_WORDS:
                etype = '意象'
            elif w in PLACE_WORDS:
                etype = '地名'
            elif w in PERSON_WORDS:
                etype = '人物'
            elif w in ALLUSION_WORDS:
                etype = '典故'
            elif w in OBJECT_WORDS:
                etype = '物象'
            else:
                continue
            annotation = ANNOTATION_DICT.get(w, f'{w}：暂无注释')
            entities.append({'text': w, 'type': etype, 'annotation': annotation})
        return entities

    def highlight_and_annotate(self, poem):
        """
        返回高亮后的诗句和注释信息
        """
        entities = self.annotate(poem)
        # 按出现顺序高亮
        highlighted = poem
        offset = 0
        highlights = []
        for ent in entities:
            idx = highlighted.find(ent['text'], offset)
            if idx != -1:
                # 使用HTML标签进行高亮
                color = ENTITY_TYPE_COLOR[ent['type']]
                tag = f'<span style="color:{color};font-weight:bold;" title="{ent["annotation"]}">{ent["text"]}</span>'
                highlighted = highlighted[:idx] + tag + highlighted[idx+len(ent['text']):]
                offset = idx + len(tag)
                highlights.append(f'{ent["text"]}（{ent["type"]}）：{ent["annotation"]}')
        return highlighted, highlights 